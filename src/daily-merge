#!/usr/bin/python26
#Description: Wrapper script that downloads, merges and uploads

import time
import signal
import os
import consts
import commands
from logger import Logger
from config import Config
import Queue
from threading import Thread
from util import *
import sys
import re
import getopt
import datetime
import fnmatch
import re
import time
import glob
import pdb
import shlex
import tempfile
import subprocess
import atexit

class DailyMerge:

    def __init__(self, source_path, date, disk_id):
        self.source_path = source_path
        self.date = date
        self.timestamp = "%s_00:00:00" %date
        self.disk_id = disk_id
        meta_data = "DISK_%d" %disk_id
        self.logger = Logger(tag = consts.SYSLOG_TAG, meta = meta_data)

    def run(self):
        status = self.start_merge()
        if status == False:
            sys.exit(1)
        else:
            sys.exit(0)

    def start_merge(self):

        incr_location = "%s/%s" %(self.source_path, consts.INCR_DIRNAME)
        self.logger.log(" Location %s " %incr_location)

    	# Get all *.splits.
        status, output = commands.getstatusoutput("ls %s/*.split" %incr_location)
        if status != 0:
            self.logger.log(" Warning: .split files not found at %s" %incr_location)
            return True

        split_list = output.split("\n")
        split_list = backup_files_filter(self.date, split_list)

    	# Get list of incremental backups to check if files mentioned in .split exists.

        status, output = commands.getstatusoutput("ls %s/*.mbb" %incr_location)
        if status != 0:
            self.logger.log(" Warning: Invalid location %s or no backup files found" %incr_location)
            return False

        backup_list = output.split("\n")

        # Generate list of backups that exists in .split file and in incremental folder.
        verified_split = []
        lines = []
        c = 0
        for split in split_list:
            fd = open(split)
            file_list = map(lambda x : os.path.join(incr_location, x.strip()), fd.readlines())
            c += len(file_list)
            if (set(file_list) <= set(backup_list)) :
                verified_split.append(split)
                lines.extend(file_list)
            else:
                if split_list[-1] != split:
                    self.logger.log("Failed : Files missing in split index file : %s" %split)
                    sys.exit(1)

        if c < consts.MIN_INCR_BACKUPS_COUNT:
            self.logger.log("Warning: We should have count(backups) > %d to process. Skipping daily merge" %consts.MIN_INCR_BACKUPS_COUNT)
            sys.exit(0)

        listfiles = "\n".join(lines)
        #check for existence of done file
        done_file = "%s/done-%s" %(incr_location, self.date)
        if os.path.isfile(done_file) :
            self.logger.log("Warning: Daily merge has already been run today for location %s" %self.source_path)
            return True

        #delete all older done files
        old_done_files = "%s/done-*" %(incr_location)
        os.system(" rm -f %s" %old_done_files)

        manifest_file = "%s/manifest.del" %incr_location

        if os.path.isfile(manifest_file):
            #means that .lock exists
            fd = open(manifest_file, "r")
            buffer = fd.read()
            fd.close()
            buffer = buffer.split("\n")
            lines = list(set(lines) - set(buffer))

        #process manifest
        status = self.process_manifest(incr_location, manifest_file)

        if status == False:
            self.logger.log ("Failed to process manifest %s" %incr_location)
            return False


        if lines == []:
            self.logger.log("Failed: No new files to process ")
            return False

        # reverse sort the list so that merge happens in the correct checkpoint order
        lines.sort()
        lines.reverse()

        listmbb = "  "
        for line in lines:
            listmbb = "%s %s" %(listmbb, line)
        output_location = "%s/daily/%s" %(self.source_path, self.date)
        #self.logger.log("Executing command: mkdir -p  %s" %output_location)
        os.system("mkdir -p %s" %output_location)
        # remove any existing merged files in this location
        os.system("rm -f %s/*.mbb" %output_location)
        os.system("rm -f %s/*.split" %output_location)

        self.logger.log(" Info. starting merge for location %s" %self.source_path)
        t_start = time.time()
        f = tempfile.NamedTemporaryFile(delete=False)
        for line in lines:
            f.write("%s\n" %line)
        f.close()

        split_file_name = "%s/backup-%s-%%.mbb" %(output_location, self.timestamp)
        merge_cmd = "%s -o %s -i %s -s %d -b %s -v" %(consts.PATH_MBMERGE_EXEC,
                                        split_file_name, f.name, consts.SPLIT_SIZE, "/dev/shm/%d/" %self.disk_id)

        process = subprocess.Popen(shlex.split(merge_cmd), stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        status = 0
        while True:
            log = process.stdout.readline()
            rv = process.poll()
            if not log and rv != None:
                status = rv
                err = process.stderr.readline()
                if err:
                    self.logger.log("Err. %s" %err)
                break
            if log.strip() != '':
                self.logger.log("Info. %s" %log)
        os.unlink(f.name)

        if status != 0:
            if status == 2: #File copy failed
                markBadDisk(self.disk_id)

            self.logger.log ("Info. Merge failed")
            os.system("rm -f %s/*" %output_location)
            return False

        t_end = time.time()

        # merge was successfull
        self.logger.log ("Info. Merge complete for %s. Took %d sec " %(output_location, (t_end - t_start)))

        # delete all the incremental files we just merged if no lock is present
        manifest_file = "%s/manifest.del" %incr_location
        print manifest_file, listfiles
        status = self.check_lock(incr_location, True, listfiles, manifest_file, True)

        if status == -1:
            self.logger.log("Failed to check lock for location %s" %self.source_path)
            return False

        # Remove .split for incrementals that are merged.
        output = os.system("rm -f %s" %" ".join(verified_split))
        if output != 0:
            self.logger.log(" Failed to delete .split in incremental folder after merge %s" %str(verified_split))

        #add a done file to the directory and we are done for this location
        output = os.system("touch %s" %done_file)
        if output != 0:
            self.logger.log (" Failed to add done file %s" %done_file)
            return False

        #add a .done file to the output directory
        try:
            os.system("touch %s/.done" %output_location)
        except:
            self.logger.log("Failed to add .done file to %s" %output_location)

        # create a manifest.split file in the output directory. this contains the list
        # of split files that the restore script needs to verify
        manifest_split = "%s/backup-%s.split" %(output_location, self.timestamp)

        status,output = commands.getstatusoutput("ls %s/*.mbb" %output_location)
        if status != 0:
            self.logger.log(" Failed: Cannot find any files in path %s" %output_location)
            return False

        lines = output.split()
        try:
            fd = open(manifest_split, "w")
        except:
            self.logger.log(" Failed: Cannot create manifest split %s" %manifest_split)
            return False

        for line in lines:
            try:
                fd.write(os.path.basename(line) + '\n')
            except:
                self.logger.log(" Failed: Cannot write manifest.split %s" %manifest_split)
                os.system("rm -f %s" %manifest_split)
                return False
        fd.close()

        return True

    def process_manifest(self, location, manifest_file):

        if os.path.isfile(manifest_file) :
            #manifest file exists
            status = self.check_lock(location)
            if status == 1:
                return True

            #no lock file exists. cleanup files in manifest
            try:
                fd = open(manifest_file)
            except:
                self.logger.log("Failed to open manifest %s" %manifest_file)
                return False

            line = fd.readline()
            while line:
                os.system ("rm -f %s" %line)
                line = fd.readline()

            fd.close()
            self.logger.log("Info : cleaning up manifest and merged files ")
            os.system("rm -f %s" %manifest_file)

        return True

    def check_lock(self, location, create_manifest=False, listmbb=None, manifest_file=None, nolockcheck=False):
        locks = glob.glob("%s/.lock-*" %location)
        if nolockcheck or len(locks):
            if nolockcheck == False:
                self.logger.log("WARNING: .lock file present. Skipping delete")

            #create a manifest file at this location
            if create_manifest == True and listmbb != None:
                if os.path.isfile(manifest_file) :
                    append = True
                else:
                    append = False

                fd = open(manifest_file, "aw")
                if append:
                    fd.write("\n")

                for line in listmbb:
                    try:
                        fd.write(line)
                    except:
                        self.logger.log(" Failed: I/O Error %s " %manifest_file)
                        return -1

                fd.close()
                return 1  # lock exists, skip delete
            return 1
        return 0              # no lock exists, clear to delete


def usage(msg):
    print "Usage: daily-merge -p backup_hostpath -d date"
    print msg
    sys.exit(1)

if __name__ == '__main__':

    try:
        opts, args = getopt.getopt(sys.argv[1:], 'p:d:')
    except getopt.GetoptError, e:
        usage(e.msg)
        sys.exit(1)

    date = None
    path = None

    try:
        c = 0
        for (o,a) in opts:
            if o == "-p":
                path = a
                c+=1
            elif o == "-d":
                date = a
                c+=1

        if c != 2:
            usage("")

        disk_id = int((path.split('/')[1]).split('_')[1])
    except Exception,e:
        usage(str(e))

    if date == None or path == None:
        usage("date and path cannot be empty")

    pidfile = os.path.join("/var/run/daily-merge-disk-%d.pid" %disk_id)

    if os.path.exists(pidfile):
        pid = int(open(pidfile, 'r').read())
        try:
            os.kill(pid, 0)
            print("Daily merge process is already running with PID %d for disk-%d" %(pid, disk_id))
            sys.exit(0)
        except:
            pass

    fd = open(pidfile,'w')
    fd.write(str(os.getpid()))
    fd.close()

    def rmpid(s = None, f = None):
        os.unlink(pidfile)

    signal.signal(signal.SIGINT, rmpid)
    merge = DailyMerge(path, date, disk_id)
    merge.run() 
    rmpid()
