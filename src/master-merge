#!/usr/bin/python26
#Description: Wrapper script that downloads, merges and uploads

import time
import os
import consts
import commands
from logger import Logger
from config import Config
import Queue
from threading import Thread
from util import natural_sortkey
import sys
import re
import getopt
import datetime
import fnmatch
import multiprocessing
import re
import time
import pdb

DAY_EPOCH = 60*60*24
PID_FILE = '/var/run/master_merge.pid'

def epoch2date(epoch):
    lt = time.localtime(epoch)
    return time.strftime('%Y-%m-%d',lt)

class MasterMerge(multiprocessing.Process):

    def __init__(self, pathname=None):
        multiprocessing.Process.__init__(self)

    def run(self):

        try:
            self.config = Config(consts.CONFIG_FILE)
            self.config.read()
            self.logger = Logger(tag = self.config.syslog_tag, level = self.config.log_level)
        except Exception, e:
            self.config.syslog_tag = consts.SYSLOG_TAG
            self.logger = Logger(tag = self.config.syslog_tag, level = self.config.log_level)
            self.logger.log("FAILED: Parsing config file (%s)" %(str(e)))

        self.game_id = self.config.game_id
        now=datetime.datetime.now()
        self.now = now
        self.timestamp = "%d:%d:%d-%d:%d" %(now.year,now.month,now.day, now.hour, now.minute)
        #get host name from the disk path
        status,output = commands.getstatusoutput("ls %s/" %pathname)
        if status != 0:
            self.logger.log(" Cannot find any hostnames in path %s" %pathname)
            return

        hosts = output.split()
        for hostname in hosts:
            #hostname = "pritish-inc-backup-test-002"
            self.scratch_dir = "/dev/shm/master-%s" %hostname
            os.system("mkdir -p %s" %self.scratch_dir)
            location = "%s/%s/%s/%s" %(consts.STORAGE_SERVER_ROOT, self.game_id, hostname, self.config.cloud)
            master_location = "%s/master" %location
            master_directory = "%s/%d-%02d-%02d" %(master_location, self.now.year, self.now.month, self.now.day)
            self.merged_file = "%s/merged-%d-%02d-%02d" %(master_directory, self.now.year, self.now.month, self.now.day)
            if os.path.isfile(self.merged_file) :
                self.logger.log("Info: Merged for this location %s already done today" %master_location)
                return

            os.system("rm -f %s/*.mbb" %master_directory)

            #get a list of daily backup fils that need to be merged
            daily_location = "%s/daily" %location
            status,output = commands.getstatusoutput("ls %s/" %daily_location)
            if status != 0:
                self.logger.log (" No daily directories found %s" %daily_location)
                return

            daily_dirs = output.split()
            merge_list = []
            dir_list = []
            for dirs in daily_dirs:
                #if a done file is present in this location. skip it
                daily_done = "%s/%s/done" %(daily_location,dirs)
                dirs = "%s/%s" %(daily_location,dirs)
                if os.path.isfile(daily_done) == 0:
                    #now get the mbb files in this location and add it to the list of files to be merged
                    status,output = commands.getstatusoutput("ls %s/*.mbb" %dirs)
                    if status != 0:
                        self.logger.log(" Warning :No backupfiles found in this directory %s" %dirs)
                    else:
                        dir_list.append(dirs)
                        files = output.split()
                        for file in files:
                            merge_list.append(file)

            master_merge_list = []
            # now locate the master backup file that needs merging
            status,output = commands.getstatusoutput("ls %s/" %master_location)
            if status != 0:
                self.logger.log (" Warning: No master directories found in %s" %master_location)
                # create the master directory
                os.system("mkdir -p %s" %master_location)

            else :
                daily_dirs = output.split()
                for dirs in daily_dirs:
                    #if a done file is present in this location. skip it
                    daily_done = "%s/%s/done" %(master_location,dirs)
                    dirs = "%s/%s" %(master_location,dirs)
                    if os.path.isfile(daily_done) == 0:
                        #now get the mbb files in this location and add it to the list of files to be merged
                        status,output = commands.getstatusoutput("ls %s/*.mbb" %dirs)
                        if status != 0:
                            self.logger.log(" Warning :No backupfiles found in this directory %s" %dirs)
                        else:
                            dir_list.append(dirs)
                            files = output.split()
                            for file in files:
                                master_merge_list.append(file)

            if master_merge_list == []:
                self.logger.log(" No master backupfile found for host %s" %hostname)
                return False

            merge_list.sort()
            merge_list.reverse()
            master_merge_list.sort()
            master_merge_list.reverse()


            for line in master_merge_list:
                merge_list.append(line)

            #merge_list = master_merge_list

            if merge_list == [] or dir_list == []:
                self.logger.log(" Failed: empty merge list or dir list")
                return False

            print str(merge_list)
            print str(dir_list)
            status = self.start_merge(master_location, master_directory, merge_list, dir_list)
            status = True
            if status == False:
                self.logger.log(" Failed to create daily merged backup for hostname %s" %hostname)

            os.system("rm -rf %s" %self.scratch_dir)

        return

    def start_merge(self, master_location, master_directory, merge_list, dir_list):


        os.system("mkdir -p %s" %master_directory)
        output_file = "%s/master-%s.mbb" %(master_directory, self.timestamp)
        self.logger.log(" Info. starting merge for location %s" %master_location)

        incr_backup1 = "%s/backup-001.mbb" %self.scratch_dir
        incr_backup2 = "%s/backup-002.mbb" %self.scratch_dir

        t_start = time.time()
        i = 0

        total_lines = len(merge_list)
        if total_lines < 2:
            self.logger.log("Info: Too few files to merge. ")
            return True

        while i < total_lines:
            cp_cmd1 = "cp -f %s %s" %(merge_list[i], incr_backup1)
            cp_cmd2 = "cp -f %s %s" %(merge_list[i+1], incr_backup2)
            cp_cmd3 = ""
            i+=2
            #odd number of files
            if total_lines%2 and (i+1) == total_lines:
                incr_backup3 = "%s/backup-003.mbb" %self.scratch_dir
                cp_cmd3 = "cp -f %s %s" %(merge_list[i], incr_backup3)
                i+=1

            print cp_cmd1
            print cp_cmd2
            try:
                os.system(cp_cmd1)
                os.system(cp_cmd2)
                if cp_cmd3:
                    os.system(cp_cmd3)

            except:
                self.logger.log("Failed. Unable to copy to scratch space")
                return False


            if cp_cmd3:
                merge_cmd =  " %s -o %s %s %s %s" %(consts.PATH_MBMERGE_EXEC, output_file, incr_backup1, incr_backup2, incr_backup3)
            else:
                merge_cmd = " %s -o %s %s %s" %(consts.PATH_MBMERGE_EXEC, output_file, incr_backup1, incr_backup2)

            print merge_cmd

            #self.logger.log(" executing command %s" %merge_cmd)
            status, output = commands.getstatusoutput(merge_cmd)
            if status != 0:
                self.logger.log ("Failed to merge for location %s, output %s" %(master_location, output))
                os.system("rm -f %s*" %output_file)
                return False

        t_end = time.time()

        # merge was successfull
        self.logger.log ("Info. Merge complete. Took %d sec " %(t_end - t_start))

        file_size = os.path.getsize(output_file) / (1024 * 1024)

        if file_size > consts.SPLIT_SIZE:
            split_file_name = "%s/master-%s" %(master_directory, self.timestamp) + '-%.mbb'
            split_cmd = "%s -o %s -s %s %s" %(consts.PATH_MBMERGE_EXEC, split_file_name, consts.SPLIT_SIZE, output_file)
            self.logger.log("Info: Executing split command %s "%split_cmd)
            ts_start = time.time()
            status, output = commands.getstatusoutput(split_cmd)
            if status != 0:
                self.logger.log("Failed to split merged file. %s" %output)
                os.system("rm -f %s/*.mbb" %master_location)
                return False

            ts_end = time.time()

            self.logger.log("Info. Split complete. Took %d sec. Total %d sec" %((ts_end - ts_start),(ts_end - t_start)))

            #delete the original merged file
            os.system("rm -f %s" %output_file)


        #create a done file in all the directories that have been processed
        #ensure that the dir list doesn't contain the current master backup directory
        for dir in dir_list:
            if dir != master_directory:
                done_file = "%s/done" %dir
                status = os.system("touch %s" %done_file)
                if status != 0:
                    self.logger.log("Failed: to create done file %s" %done_file)

        os.system("touch %s" %self.merged_file)
        self.logger.log("Success: Master merge completed. %s" %output_file)

        return True


if __name__ == '__main__':

    if os.path.exists(PID_FILE):
        pid = int(open(PID_FILE, 'r').read())
        try:
            os.kill(pid, 0)
            print("Merge process is already running with PID %d" %pid)
            os._exit(1)
        except:
            pass
    fd = open(PID_FILE,'w')
    fd.write(str(os.getpid()))
    fd.close()

    if len(sys.argv) != 1:
        print
        print "Usage: %s <hostame list location>" %sys.argv[0]
        sys.exit(1)

    jobs = []

    for i in range(7):
        pathname = "/data_%d" %(i+1)
        #pathname = "/data_3"
        merge = MasterMerge(pathname)
        jobs.append(merge)
        merge.start()

    #jobs[-1].terminate()
    for j in jobs:
        j.join()

    os._exit(0)
