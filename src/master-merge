#!/usr/bin/python26
#Description: Wrapper script that downloads, merges and uploads

import time
import signal
import os
import consts
from logger import Logger
from config import Config
import Queue
from threading import Thread
from util import *
import sys
import re
import getopt
import datetime
import fnmatch
import re
import time
import shlex
import pdb
import glob
import tempfile
import subprocess

class MasterMerge:

    def __init__(self, source_path, date, disk_id, silent = False):
        self.source_path = source_path
        self.date = date
        self.timestamp = "%s_00:00:00" %date
        self.disk_id = disk_id
        meta_data = "MasterMerge:DISK_%d" %disk_id
        self.config = Config(consts.CONFIG_FILE)
        self.config.read()
        self.logger = Logger(tag = self.config.syslog_tag, meta = meta_data)
        if silent:
            self.logger.set_silent()

    def run(self):
        status = self.start_merge()
        if status == False:
            return 1
        else:
            return 0

    def start_merge(self):
        master_location = "%s/master" %self.source_path
        master_directory = "%s/%s" %(master_location, self.date)
        self.merged_file = "%s/merged-%s" %(master_directory, self.date)
        if os.path.isfile(self.merged_file) or os.path.isfile("%s/done" %master_directory):
            self.logger.log("Info: Merging for this location %s has already been completed" %master_location)
            return True

        os.system("rm -f %s/*.mbb" %master_directory)
        os.system("rm -f %s/*.split" %master_directory)
        found_master = False
        merge_list = []
        yr, mm, dd =  map(lambda x: int(x), self.date.split('-'))
        datetime_object = datetime.datetime(yr, mm, dd)
        for i in range(consts.MAX_BACKUP_LOOKUP_DAYS+1):
            difference = datetime.timedelta(days=-(i))
            datestamp = (datetime_object + difference).strftime('%Y-%m-%d')
            path = os.path.join(self.source_path, consts.MASTER_DIRNAME, datestamp)
            if os.path.exists(os.path.join(path, "done")):
                master_list = glob.glob("%s/*.mbb" %path)
                if len(master_list) > 0:
                    found_master = True
                    break

            path = os.path.join(self.source_path, consts.PERIODIC_DIRNAME, datestamp)
            if os.path.exists(os.path.join(path, "done")):
                periodic_list = glob.glob("%s/*.mbb" %path)
                periodic_list.sort()
                periodic_list.reverse()
                merge_list.extend(periodic_list)

        if found_master:
            master_list.sort()
            master_list.reverse()
            merge_list.extend(master_list)
        else:
            self.logger.log("Err: No master backupfile found")
            return False

        os.system("mkdir -p %s" %master_directory)

        t_start = time.time()
        total_lines = len(merge_list)
        self.logger.log(" Info. starting merge for location %s. Files to merge %d" %(master_location, total_lines))
        if total_lines < 2:
            self.logger.log("Info: Too few files to merge. ")
            return True

        f = tempfile.NamedTemporaryFile(delete=False)
        for line in merge_list:
            f.write("%s\n" %line)
        f.close()

        split_file_name = "%s/backup-%s-%%.mbb" %(master_directory, self.timestamp)
        merge_cmd = "%s -o %s -i %s -s %d -b %s -v" %(consts.PATH_MBMERGE_EXEC,
                                        split_file_name, f.name, consts.SPLIT_SIZE, "/dev/shm/%d/" %self.disk_id)

        process = subprocess.Popen(shlex.split(merge_cmd), stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        status = 0
        while True:
            log = process.stdout.readline()
            rv = process.poll()
            if not log and rv != None:
                status = rv
                err = process.stderr.readline()
                if err:
                    self.logger.log("Err. %s" %err)
                break
            if log.strip() != '':
                self.logger.log("Info. %s" %log)
        os.unlink(f.name)

        if status != 0:
            if status == 2: #File copy failed
                markBadDisk(self.disk_id)

            self.logger.log ("Info. Merge failed")
            os.system("rm -f %s/*" %master_directory)
            return False

        t_end = time.time()

        # merge was successfull
        self.logger.log ("Info. Merge complete for %s. Took %d sec " %(master_location, (t_end - t_start)))

        t_end = time.time()


        # create a manifest.split file in the output directory. this contains the list
        # of split files that the restore script needs to verify
        manifest_split = "%s/backup-%s.split" %(master_directory, self.timestamp)

        status,output = getcommandoutput("ls %s/*.mbb" %master_directory)
        if status != 0:
            self.logger.log(" Failed: Cannot find any files in path %s" %master_directory)
            return False

        lines = output.split()
        try:
            fd = open(manifest_split, "w")
        except:
            self.logger.log(" Failed: Cannot create manifest split %s" %manifest_split)
            return False

        for line in lines:
            try:
                fd.write(os.path.basename(line) + '\n')
            except:
                self.logger.log(" Failed: Cannot write manifest.split %s" %manifest_split)
                os.system("rm -f %s" %manifest_split)
                return False
        fd.close()

        #add a done file to the output directory
        try:
            os.system("echo 0 > %s/done" %master_directory)
        except:
            self.logger.log("Failed to add done file to %s" %master_directory)

        os.system("echo 0 > %s" %self.merged_file)
        self.logger.log("Success: Master merge completed")

        return True

def usage(msg):
    print "Usage: master-merge -p backup_hostpath -d date [-v]"
    print msg
    sys.exit(1)

if __name__ == '__main__':

    try:
        opts, args = getopt.getopt(sys.argv[1:], 'p:d:v')
    except getopt.GetoptError, e:
        usage(e.msg)
        sys.exit(1)

    date = None
    path = None
    silent = True

    try:
        c = 0
        for (o,a) in opts:
            if o == "-p":
                path = a
                c+=1
            elif o == "-d":
                date = a
                c+=1
            elif o == '-v':
                silent = False

        if c != 2:
            usage("")

        disk_id = int((path.split('/')[1]).split('_')[1])
    except Exception,e:
        usage(str(e))

    if date == None or path == None:
        usage("date and path cannot be empty")

    pidfile = os.path.join("/var/run/master-merge-disk-%d.pid" %disk_id)

    if os.path.exists(pidfile):
        pid = int(open(pidfile, 'r').read())
        try:
            os.kill(pid, 0)
            print("Mastery merge process is already running with PID %d for disk-%d" %(pid, disk_id))
            sys.exit(0)
        except:
            pass

    fd = open(pidfile,'w')
    fd.write(str(os.getpid()))
    fd.close()

    def rmpid(s = None, f = None):
        os.unlink(pidfile)

    signal.signal(signal.SIGINT, rmpid)
    merge = MasterMerge(path, date, disk_id, silent)
    rv = merge.run()
    rmpid()
    sys.exit(rv)
